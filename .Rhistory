#Summary Statistics Table
stargazer(kc_variables, type = "text", style = "default")
?stargazer
#Summary Statistics Table
stargazer(kc_variables, type = "text", style = "qje")
#Summary Statistics Table
stargazer(kc_variables, type = "text", style = "default")
#Summary Statistics Table
stargazer(kc_variables, type = "text", style = "default", title = "Summary Statistics")
#Summary Statistics Table
stargazer(kc_variables, type = "html", style = "default", title = "Summary Statistics")
#Summary Statistics Table
stargazer(kc_variables, type = "html", style = "default", title = "Summary Statistics", out="summarystats1.htm")
#Summary Statistics Table
stargazer(kc_variables, type = "text", style = "default", title = "Summary Statistics")
#Summary Statistics Table
stargazer(subset(kc_variables[c("bedrooms", "bathrooms", "sqft_living", "sqft_lot")]), type = "text", style = "default", title = "Physical Qualities")
#Summary Statistics Table
stargazer(subset(kc_variables, select = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot")), type = "text", style = "default", title = "Physical Qualities")
physical <- kc_variables[, c("bedrooms", "bathrooms", "sqft_living", "sqft_lot")]
stargazer(physical, type = "text", style = "default", title = "Physical Qualities")
physical <- kc_variables[, c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "condition", "grade", "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "Age")]
stargazer(physical, type = "text", style = "default", title = "Physical Characteristics")
amenities <- kc_variables[, c("parks_nn1", "parks_nn2", "parks_nn3", "parks_nn4", "in_district", "waterfront", "view")]
stargazer(amenities, type = "text", style = "default", title = "Amenities")
stargazer(kc_variables$price, type = "text", style = "default", title = "Price")
#Density plot of price variable
plot(density(kc_variables$price)) #it is skewed!!! knew it!!!
#Converting kc_variables tibble into proper data frame for summary statistics
kc_variables <- as.data.frame(kc_variables)
#Summary Statistics Tables
##Price
price <- kc_variables[, c("price")]
stargazer(price, type = "text", style = "default", title = "Price")
#Density plot of price variable
plot(density(kc_variables$price)) #it is skewed!!! knew it!!!
#Converting kc_variables tibble into proper data frame for summary statistics
kc_variables <- as.data.frame(kc_variables)
#Summary Statistics Tables
##Internal and Physical Characteristics
physical <- kc_variables[, c("price", "bedrooms", "bathrooms", "sqft_living", "sqft_lot", "condition", "grade", "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "Age")]
stargazer(physical, type = "text", style = "default", title = "Physical Characteristics") #turn to html
##Amenities
amenities <- kc_variables[, c("parks_nn1", "parks_nn2", "parks_nn3", "parks_nn4", "in_district", "waterfront", "view")]
stargazer(amenities, type = "text", style = "default", title = "Amenities") #turn to html
#80/20 split for testing and training
set.seed(1)
row.number <- sample(1:nrow(kc_variables), 0.8*nrow(kc_variables))
train = kc_variables[row.number,]
test = kc_variables[-row.number,]
dim(train)
dim(test)
#just doing some practice models
model1 = lm(log(price)~., data=train)   #omg these are so much better!!!
summary(model1)
model2 = update(model1, ~.-bedrooms-sft_basement-parks_nn1-parks_nn2)
summary(model2)
#plotting residuals
plot(model2)
#checking for exponential relationships
model3 = lm(log(price)~ bathrooms + sqft_living + sqft_lot +
floors + waterfront + view + condition + grade + sqft_above +
sqft_basement + yr_built + yr_renovated + zipcode + sqft_living15 +
sqft_lot15 + parks_nn3 + parks_nn4 + in_district + Age + I(bathrooms^2) + I(sqft_living^2) + I(sqft_lot^2) + I(floors^2) + I(waterfront^2) + I(view^2) + I(condition^2) + I(grade^2) + I(sqft_above^2) + I(sqft_basement^2) + I(yr_built^2) + I(yr_renovated^2) + I(zipcode^2) + I(sqft_living15^2) + I(sqft_lot15^2) + I(parks_nn3^2) +I(parks_nn4^2) + I(in_district^2) + I(Age^2), data = train)
summary(model3)
#remove insignificant variables & variables I don't find interesting
model4 = update(model3, ~.-sqft_above-sqft_basement-zipcode-Age-I(bathrooms^2)-I(sqft_living^2)-I(sqft_lot^2)-I(waterfront^2)-I(view^2)-I(condition^2)-I(zipcode^2)-I(in_district^2)-I(Age^2)-I(sqft_lot15^2)-sqft_lot15-sqft_living15-sqft_lot)
summary(model4)
plot(model4)
#using test dataset to evaluate model - make a prediction based on model 4
pred1 <- predict(model4, newdata = test)
rmse <- sqrt(sum((exp(pred1) - test$price)^2)/length(test$price))
c(RMSE = rmse, R2=summary(model4)$r.squared)
#plot - compares test prices to predicted prices
par(mfrow=c(1,1))
plot(test$price, exp(pred1))
abline(0, 1, col = "red")
# base map
kingtracts <-
get_acs(geography = "tract", variables = c("B25026_001E","B25058_001E"),
year=2015, state=53, county="King", geometry=T, output="wide") %>%
st_transform('EPSG:4326') %>%
rename(TotalPop = B25026_001E,
MedRent = B25058_001E)
# mapping sale price
colors <- brewer.pal(5, "YlGnBu")
breaks <- quantile(kc_variables_sf$price, probs = seq(0, 1, 0.2))
# Create labels for legend with sale prices corresponding to each quintile
labels <- c(paste0("$", formatC(breaks[1], format = "d", big.mark = ",")),
paste0("$", formatC(breaks[2], format = "d", big.mark = ",")),
paste0("$", formatC(breaks[3], format = "d", big.mark = ",")),
paste0("$", formatC(breaks[4], format = "d", big.mark = ",")),
paste0("$", formatC(breaks[5], format = "d", big.mark = ",")))
# Plot the map with price quintiles differentiated by color and labeled legend
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(colour = cut(price, breaks = breaks, include.lowest = TRUE)),
show.legend = "point", size = 0.75) +
scale_colour_manual(values = colors, labels = labels, name = "Sale Price Quintiles") +
labs(title = "Sale Price Distribution, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
colors <- brewer.pal(2, "YlOrRd")
colors <- brewer.pal(5, "YlOrRd")
colors <- brewer.pal(5, "YlOrRd")
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(color = factor(yr_built))) +
scale_colour_manual(values = colors, labels = labels, name = "Year Built") +
labs(title = "Breakdown of Home Age, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
colors <- brewer.pal(5, "YlOrRd")
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(color = factor(yr_built))) +
scale_colour_manual(values = colors, name = "Year Built") +
labs(title = "Breakdown of Home Age, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
colors <- brewer.pal("YlOrRd")
colors <- brewer.pal(5, "YlOrRd")
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(color = factor(yr_built))) +
scale_colour_manual(values = colors, name = "Year Built") +
labs(title = "Breakdown of Home Age, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
colors <- brewer.pal(9, "YlOrRd")
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(color = factor(yr_built))) +
scale_colour_manual(values = colors, name = "Year Built") +
labs(title = "Breakdown of Home Age, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
colors <- brewer.pal(9, "YlOrRd")  # You can adjust the number of colors as needed
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(color = yr_built)) +
scale_colour_gradientn(colors = colors, name = "Year Built") +
labs(title = "Breakdown of Home Age, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
#80/20 split for testing and training
set.seed(1)
row.number <- sample(1:nrow(kc_variables), 0.8*nrow(kc_variables))
train = kc_variables[row.number,]
test = kc_variables[-row.number,]
dim(train)
dim(test)
#just doing some practice models
model1 = lm(log(price)~., data=train)   #omg these are so much better!!!
summary(model1)
model2 = update(model1, ~.-bedrooms-sft_basement-parks_nn1-parks_nn2)
summary(model2)
#plotting residuals
plot(model2)
#checking for exponential relationships
model3 = lm(log(price)~ bathrooms + sqft_living + sqft_lot +
floors + waterfront + view + condition + grade + sqft_above +
sqft_basement + yr_built + yr_renovated + zipcode + sqft_living15 +
sqft_lot15 + parks_nn3 + parks_nn4 + in_district + Age + I(bathrooms^2) + I(sqft_living^2) + I(sqft_lot^2) + I(floors^2) + I(waterfront^2) + I(view^2) + I(condition^2) + I(grade^2) + I(sqft_above^2) + I(sqft_basement^2) + I(yr_built^2) + I(yr_renovated^2) + I(zipcode^2) + I(sqft_living15^2) + I(sqft_lot15^2) + I(parks_nn3^2) +I(parks_nn4^2) + I(in_district^2) + I(Age^2), data = train)
summary(model3)
#remove insignificant variables & variables I don't find interesting
model4 = update(model3, ~.-sqft_above-sqft_basement-zipcode-Age-I(bathrooms^2)-I(sqft_living^2)-I(sqft_lot^2)-I(waterfront^2)-I(view^2)-I(condition^2)-I(zipcode^2)-I(in_district^2)-I(Age^2)-I(sqft_lot15^2)-sqft_lot15-sqft_living15-sqft_lot)
summary(model4)
plot(model4)
#using test dataset to evaluate model - make a prediction based on model 4
pred1 <- predict(model4, newdata = test)
rmse <- sqrt(sum((exp(pred1) - test$price)^2)/length(test$price))
c(RMSE = rmse, R2=summary(model4)$r.squared)
#plot - compares test prices to predicted prices
par(mfrow=c(1,1))
plot(test$price, exp(pred1))
abline(0, 1, col = "red")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(sf)
library(dplyr)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot)
library(ggplot2)
library(corrr)
library(kableExtra)
library(jtools)
library(ggstance)
library(ggpubr)
library(broom.mixed)
library(RColorBrewer)
library(stargazer)
library(geojsonsf)
library(nngeo)
library(FNN)
library(scales)
library(classInt)
library(ggspatial)
library(GGally)
library(ISLR2)
library(car)
census_api_key("2599edd9b7d100bcf3d6894676ccdd86672199c1", overwrite = TRUE)
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
colors <- brewer.pal(9, "BuPu")  # You can adjust the number of colors as needed
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(color = yr_built)) +
scale_colour_gradientn(colors = colors, name = "Year Built") +
labs(title = "Breakdown of Home Age, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(sf)
library(dplyr)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot)
library(ggplot2)
library(corrr)
library(kableExtra)
library(jtools)
library(ggstance)
library(ggpubr)
library(broom.mixed)
library(RColorBrewer)
library(stargazer)
library(geojsonsf)
library(nngeo)
library(FNN)
library(scales)
library(classInt)
library(ggspatial)
library(GGally)
library(ISLR2)
library(car)
census_api_key("2599edd9b7d100bcf3d6894676ccdd86672199c1", overwrite = TRUE)
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
csv_url <- "https://raw.githubusercontent.com/cnmitch01/PPA-Midterm/main/data/kc_house_data.csv"
parks_url <- "https://raw.githubusercontent.com/cnmitch01/PPA-Midterm/main/data/park_facilities.csv"
graduation_url <- "https://raw.githubusercontent.com/cnmitch01/PPA-Midterm/main/data/kc_graduation_rates_2014-2015.csv"
districts_url <- "https://raw.githubusercontent.com/cnmitch01/PPA-Midterm/main/data/School_Districts.geojson"
kc_house_data <- read_csv(csv_url)
kc_parks_data <- st_read(parks_url)
kc_graduation_data <- st_read(graduation_url)
kc_districts_data <- st_read(districts_url)
#Making the data spatial
kc_house_sf <- st_as_sf(kc_house_data, coords = c("long", "lat"), crs = "EPSG:4326")
kc_parks_sf <- st_as_sf(kc_parks_data, coords = c("X", "Y"), crs = "EPSG:4326")
#Organizing parks data to incorporate as variable for model
kc_parks_sf <- kc_parks_sf %>%
filter(SiteType == "Park Site")
#Adding parks nearest neighbor to variables sf
kc_variables_sf <-
kc_house_sf %>%
mutate(
parks_nn1 = nn_function(st_coordinates(kc_house_sf),
st_coordinates(kc_parks_sf), k = 1),
parks_nn2 = nn_function(st_coordinates(kc_house_sf),
st_coordinates(kc_parks_sf), k =2),
parks_nn3 = nn_function(st_coordinates(kc_house_sf),
st_coordinates(kc_parks_sf), k =3),
parks_nn4 = nn_function(st_coordinates(kc_house_sf),
st_coordinates(kc_parks_sf), k =4))
#Bringing in schools data
## First - graduation rates by district
kc_graduation_data <- kc_graduation_data %>%
filter(County == "King" & StudentGroupType == "All"& Cohort == "Four Year") %>% #four-year graduation rate for all students in KC
select(DistrictCode, DistrictName, SchoolCode, SchoolName, GraduationRate) %>%
mutate(GraduationRate = as.numeric(GraduationRate)) %>%
drop_na(GraduationRate) %>%
filter(GraduationRate > .90) %>%  #filtering for districts with graduation rates greater than 90%
group_by(DistrictName, DistrictCode) %>%
summarise(mean(GraduationRate)) %>%
rename(NAME = DistrictName) %>%
mutate(NAME = gsub(" School District", "", NAME)) %>%
mutate(NAME = gsub(" No. 1", "", NAME))
#Joining graduation rates to districts for spatial info
kc_districts_data <- as.data.frame(kc_districts_data)
kc_schools_data <- inner_join(kc_districts_data, kc_graduation_data)
kc_schools_sf <- st_as_sf(kc_schools_data)
#Homes that fall into districts with average graduation rates of over 90%
kc_house_sf <- st_transform(kc_house_sf, st_crs(kc_schools_sf))
kc_variables_sf <- kc_variables_sf %>%
mutate(
in_district = as.integer(ifelse(st_within(kc_house_sf, kc_schools_sf), 1, 0))
) %>%
replace_na(replace = list(in_district = 0))
#Creating dataframe with all variables
kc_variables <- kc_variables_sf %>%
mutate(Age = 2015 - yr_built) %>%
st_drop_geometry() %>%
select_if(is.numeric) %>%
na.omit()
# base map
kingtracts <-
get_acs(geography = "tract", variables = c("B25026_001E","B25058_001E"),
year=2015, state=53, county="King", geometry=T, output="wide") %>%
st_transform('EPSG:4326') %>%
rename(TotalPop = B25026_001E,
MedRent = B25058_001E)
# mapping sale price
colors <- brewer.pal(5, "YlGnBu")
breaks <- quantile(kc_variables_sf$price, probs = seq(0, 1, 0.2))
# Create labels for legend with sale prices corresponding to each quintile
labels <- c(paste0("$", formatC(breaks[1], format = "d", big.mark = ",")),
paste0("$", formatC(breaks[2], format = "d", big.mark = ",")),
paste0("$", formatC(breaks[3], format = "d", big.mark = ",")),
paste0("$", formatC(breaks[4], format = "d", big.mark = ",")),
paste0("$", formatC(breaks[5], format = "d", big.mark = ",")))
# Plot the map with price quintiles differentiated by color and labeled legend
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(colour = cut(price, breaks = breaks, include.lowest = TRUE)),
show.legend = "point", size = 0.75) +
scale_colour_manual(values = colors, labels = labels, name = "Sale Price Quintiles") +
labs(title = "Sale Price Distribution, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
colors <- brewer.pal(9, "BuPu")  # You can adjust the number of colors as needed
ggplot() +
geom_sf(data = kingtracts, color = NA) +
geom_sf(data = kc_variables_sf, aes(color = yr_built)) +
scale_colour_gradientn(colors = colors, name = "Year Built") +
labs(title = "Breakdown of Home Age, King County") +
annotation_scale(location="bl", unit_category="imperial") +
annotation_north_arrow(location = "br", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
pad_x = unit(0.50, "cm"),
pad_y = unit(0.25, "cm")) +
theme_void() +
theme(legend.text = element_text(size = 10)) +
guides(colour = guide_legend(override.aes = list(size = 3)))
correlation_matrix <- cor(kc_variables)
ggcorrplot(
correlation_matrix,  # Correlation matrix
p.mat = cor_pmat(kc_variables),  # p-values for significance
colors = c("#25CB10", "white", "#FA7800"),  # Custom color palette
type = "lower",  # Lower triangle of the correlation matrix
insig = "blank"  # Hide insignificant correlations
) +
labs(title = "Correlation across numeric variables")
kc_selection <- kc_variables %>%
select(price, bathrooms, sqft_living, in_district, parks_nn4)
kc_long <- gather(kc_selection, Variable, Value, -price)
ggplot(kc_long, aes(Value, price)) +   # Set up the plot
geom_point(size = .5) +                       # Add points for each data point
geom_smooth(method = "lm", se = FALSE, colour = "#FA7800") +  # Add linear regression lines
facet_wrap(~Variable, ncol = 3, scales = "free") +  # Create separate plots for each variable
labs(title = "Price as a function of continuous variables") +  # Set plot title
theme_minimal()
#80/20 split for testing and training
set.seed(1)
row.number <- sample(1:nrow(kc_variables), 0.8*nrow(kc_variables))
train = kc_variables[row.number,]
test = kc_variables[-row.number,]
dim(train)
dim(test)
#just doing some practice models
model1 = lm(log(price)~., data=train)   #omg these are so much better!!!
summary(model1)
model2 = update(model1, ~.-bedrooms-sft_basement-parks_nn1-parks_nn2)
summary(model2)
#plotting residuals
plot(model2)
#checking for exponential relationships
model3 = lm(log(price)~ bathrooms + sqft_living + sqft_lot +
floors + waterfront + view + condition + grade + sqft_above +
sqft_basement + yr_built + yr_renovated + zipcode + sqft_living15 +
sqft_lot15 + parks_nn3 + parks_nn4 + in_district + Age + I(bathrooms^2) + I(sqft_living^2) + I(sqft_lot^2) + I(floors^2) + I(waterfront^2) + I(view^2) + I(condition^2) + I(grade^2) + I(sqft_above^2) + I(sqft_basement^2) + I(yr_built^2) + I(yr_renovated^2) + I(zipcode^2) + I(sqft_living15^2) + I(sqft_lot15^2) + I(parks_nn3^2) +I(parks_nn4^2) + I(in_district^2) + I(Age^2), data = train)
summary(model3)
#remove insignificant variables & variables I don't find interesting
kc_model = update(model3, ~.-sqft_above-sqft_basement-zipcode-Age-I(bathrooms^2)-I(sqft_living^2)-I(sqft_lot^2)-I(waterfront^2)-I(view^2)-I(condition^2)-I(zipcode^2)-I(in_district^2)-I(Age^2)-I(sqft_lot15^2)-sqft_lot15-sqft_living15-sqft_lot)
summary(kc_model)
plot(kc_model)
#using test dataset to evaluate model - make a prediction based on model 4
pred1 <- predict(kc_model, newdata = test)
rmse <- sqrt(sum((exp(pred1) - test$price)^2)/length(test$price))
c(RMSE = rmse, R2=summary(model4)$r.squared)
#using test dataset to evaluate model - make a prediction based on model 4
pred1 <- predict(kc_model, newdata = test)
rmse <- sqrt(sum((exp(pred1) - test$price)^2)/length(test$price))
c(RMSE = rmse, R2=summary(kc_model)$r.squared)
#plot - compares test prices to predicted prices
par(mfrow=c(1,1))
plot(test$price, exp(pred1))
abline(0, 1, col = "red")
#using test dataset to evaluate model - make a prediction based on model 4
pred1 <- predict(kc_model, newdata = test)
rmse <- sqrt(sum((exp(pred1) - test$price)^2)/length(test$price))
c(RMSE = rmse, R2=summary(kc_model)$r.squared)
#plot - compares test (actual) prices to predicted prices
par(mfrow=c(1,1))
plot(test$price, exp(pred1),
xlab = "Observed", ylab = "Predicted",
main = "Observed vs Predicted Values")
abline(0, 1, col = "red")
correlation_matrix <- cor(kc_variables)
ggcorrplot(
correlation_matrix,  # Correlation matrix
p.mat = cor_pmat(kc_variables),  # p-values for significance
colors = c("#25CB10", "white", "#FA7800"),  # Custom color palette
type = "lower",  # Lower triangle of the correlation matrix
insig = "blank"  # Hide insignificant correlations
) +
labs(title = "Correlation across numeric variables")
kc_selection <- kc_variables %>%
select(price, bathrooms, sqft_living, in_district, parks_nn4)
kc_long <- gather(kc_selection, Variable, Value, -price)
ggplot(kc_long, aes(Value, price)) +   # Set up the plot
geom_point(size = .5) +                       # Add points for each data point
geom_smooth(method = "lm", se = FALSE, colour = "#FA7800") +  # Add linear regression lines
facet_wrap(~Variable, ncol = 3, scales = "free") +  # Create separate plots for each variable
labs(title = "Price as a function of continuous variables") +  # Set plot title
theme_minimal()
kc_selection <- kc_variables %>%
select(price, bathrooms, sqft_living, in_district, parks_nn4)
kc_long <- gather(kc_selection, Variable, Value, -price)
ggplot(kc_long, aes(Value, price)) +   # Set up the plot
geom_point(size = .5) +                       # Add points for each data point
geom_smooth(method = "lm", se = FALSE, colour = "#FA7800") +  # Add linear regression lines
facet_wrap(~Variable, ncol = 3, scales = "free") +  # Create separate plots for each variable
labs(title = "Price as a function of continuous variables") +  # Set plot title
theme_minimal()
kc_selection <- kc_variables %>%
select(price, bathrooms, sqft_living, in_district, parks_nn4)
kc_long <- gather(kc_selection, Variable, Value, -price)
ggplot(kc_long, aes(Value, price)) +   # Set up the plot
geom_point(size = .5) +                       # Add points for each data point
geom_smooth(method = "lm", se = FALSE, colour = "Blue") +  # Add linear regression lines
facet_wrap(~Variable, ncol = 3, scales = "free") +  # Create separate plots for each variable
labs(title = "Price as a function of continuous variables") +  # Set plot title
theme_minimal()
#Density plot of price variable
plot(density(kc_variables$price)) #it is skewed!!! knew it!!!
#Converting kc_variables tibble into proper data frame for summary statistics
kc_variables <- as.data.frame(kc_variables)
#Summary Statistics Tables
##Internal and Physical Characteristics
physical <- kc_variables[, c("price", "bedrooms", "bathrooms", "sqft_living", "sqft_lot", "condition", "grade", "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "Age")]
stargazer(physical, type = "text", style = "default", title = "Physical Characteristics") #turn to html
##Amenities
amenities <- kc_variables[, c("parks_nn1", "parks_nn2", "parks_nn3", "parks_nn4", "in_district", "waterfront", "view")]
stargazer(amenities, type = "text", style = "default", title = "Amenities") #turn to html
